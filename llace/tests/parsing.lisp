(defpackage llace/tests/parsing
  (:use :cl :serapeum :parachute :llace/functional-parsing :llace/parsing)
  (:shadowing-import-from :parachute :true))
(in-package :llace/tests/parsing)

(define-test @natural
  (is equal '() (parse (llace/parsing::@natural) ""))
  (is equal '((1 . "")) (parse (llace/parsing::@natural) "1"))
  (is equal '() (parse (llace/parsing::@natural) "-1"))
  (is equal '((123 . "")) (parse (llace/parsing::@natural) "123"))
  (is equal '() (parse (llace/parsing::@natural) "-123"))
  (is equal '((123 . "abc")) (parse (llace/parsing::@natural) "123abc"))
  (is equal '() (parse (llace/parsing::@natural) "-123abc"))
  (is equal '() (parse (llace/parsing::@natural) "abc123")))

(define-test @integer
  (is equal '() (parse (llace/parsing::@integer) ""))
  (is equal '((1 . "")) (parse (llace/parsing::@integer) "1"))
  (is equal '((-1 . "")) (parse (llace/parsing::@integer) "-1"))
  (is equal '((123 . "")) (parse (llace/parsing::@integer) "123"))
  (is equal '((-123 . "")) (parse (llace/parsing::@integer) "-123"))
  (is equal '((123 . "abc")) (parse (llace/parsing::@integer) "123abc"))
  (is equal '((-123 . "abc")) (parse (llace/parsing::@integer) "-123abc"))
  (is equal '() (parse (llace/parsing::@integer) "abc123")))

(define-test @spacing
  (is equal '((() . "")) (parse (llace/parsing::@spacing) ""))
  (is equal '((() . "")) (parse (llace/parsing::@spacing) " "))
  (is equal '((() . "")) (parse (llace/parsing::@spacing) "	"))
  (is equal '((() . "")) (parse (llace/parsing::@spacing) "   	"))
  (is equal '((() . "foo  	")) (parse (llace/parsing::@spacing) "   	foo  	")))

(define-test @tnatural
  (is equal '() (parse (llace/parsing::@tnatural) ""))
  (is equal '((1 . "")) (parse (llace/parsing::@tnatural) "1"))
  (is equal '((1 . "")) (parse (llace/parsing::@tnatural) "  1	"))
  (is equal '() (parse (llace/parsing::@tnatural) "-1"))
  (is equal '((123 . "")) (parse (llace/parsing::@tnatural) "123"))
  (is equal '((123 . "")) (parse (llace/parsing::@tnatural) "	 123   "))
  (is equal '() (parse (llace/parsing::@tnatural) "-123"))
  (is equal '((123 . "abc")) (parse (llace/parsing::@tnatural) "123abc"))
  (is equal '((123 . "abc")) (parse (llace/parsing::@tnatural) " 123	abc"))
  (is equal '() (parse (llace/parsing::@tnatural) "-123abc"))
  (is equal '() (parse (llace/parsing::@tnatural) "abc123")))

(define-test @tinteger
  (is equal '() (parse (llace/parsing::@tinteger) ""))
  (is equal '((1 . "")) (parse (llace/parsing::@tinteger) "1"))
  (is equal '((1 . "")) (parse (llace/parsing::@tinteger) "   1 	 "))
  (is equal '((-1 . "")) (parse (llace/parsing::@tinteger) "-1"))
  (is equal '((-1 . "")) (parse (llace/parsing::@tinteger) "	 -1  "))
  (is equal '((123 . "")) (parse (llace/parsing::@tinteger) "123"))
  (is equal '((123 . "")) (parse (llace/parsing::@tinteger) "  123	 "))
  (is equal '((-123 . "")) (parse (llace/parsing::@tinteger) "-123"))
  (is equal '((-123 . "")) (parse (llace/parsing::@tinteger) " 	 -123    "))
  (is equal '((123 . "abc")) (parse (llace/parsing::@tinteger) "123abc"))
  (is equal '((123 . "abc")) (parse (llace/parsing::@tinteger) "	123 abc"))
  (is equal '((-123 . "abc")) (parse (llace/parsing::@tinteger) "-123abc"))
  (is equal '((-123 . "abc")) (parse (llace/parsing::@tinteger) "    -123	abc"))
  (is equal '() (parse (llace/parsing::@tinteger) "abc123")))

(define-test a-character
  (is equal '() (parse (llace/parsing::a-character #\-) ""))
  (is equal '() (parse (llace/parsing::a-character #\-) "1"))
  (is equal '() (parse (llace/parsing::a-character #\-) "a"))
  (is equal '() (parse (llace/parsing::a-character #\-) "_"))
  (is equal '((#\- . "")) (parse (llace/parsing::a-character #\-) "-"))
  (is equal '((#\- . "")) (parse (llace/parsing::a-character #\-) "	 - 	"))
  (is equal '((#\- . "1")) (parse (llace/parsing::a-character #\-) "-1"))
  (is equal '((#\- . "1")) (parse (llace/parsing::a-character #\-) "	-   1"))
  (is equal '((#\- . "123")) (parse (llace/parsing::a-character #\-) "-123"))
  (is equal '((#\- . "123")) (parse (llace/parsing::a-character #\-) " -	123")))

(define-test a-symbol
  (is equal '() (parse (llace/parsing::a-symbol "let") ""))
  (is equal '() (parse (llace/parsing::a-symbol "let") "l"))
  (is equal '() (parse (llace/parsing::a-symbol "let") "le"))
  (is equal '(("let" . "")) (parse (llace/parsing::a-symbol "let") "let"))
  (is equal '(("let" . "")) (parse (llace/parsing::a-symbol "let") "  	let 	"))
  (is equal '() (parse (llace/parsing::a-symbol "let") "leet"))
  (is equal '(("let" . "me")) (parse (llace/parsing::a-symbol "let") "letme"))
  (is equal '(("let" . "me")) (parse (llace/parsing::a-symbol "let") " 	let  me"))
  (is equal '(("let" . "x = 42;")) (parse (llace/parsing::a-symbol "let") "let x = 42;"))
  (is equal '(("let" . "x = 42;")) (parse (llace/parsing::a-symbol "let") "	let  x = 42;")))

(define-test expr
  (is equal '((4 . "")) (parse (expr) "2 + 2"))
  (is equal '((4 . "")) (parse (expr) "2 +2"))
  (is equal '((4 . "")) (parse (expr) " 2 +2"))
  (is equal '((4 . "")) (parse (expr) "2+2"))
  (is equal '((4 . "")) (parse (expr) "2 + (2)"))
  (is equal '((4 . "")) (parse (expr) "(2) + (2)"))
  (is equal '((4 . "")) (parse (expr) "((2) + (2))"))
  (is equal '((4 . "")) (parse (expr) " ( (2) + (2) ) "))
  (is equal '((10 . "")) (parse (expr) "2 + 2 * 4"))
  (is equal '((10 . "")) (parse (expr) "( 2+2*4 )"))
  (is equal '((16 . "")) (parse (expr) "(2 + 2) * 4"))
  (is equal '((16 . "")) (parse (expr) "(2 + 2 * 1) * 4"))
  (is equal '((10 . "")) (parse (expr) "(2 + 2 * 1) * 2 + 1 + 1"))
  (is equal '((13 . "")) (parse (expr) "(2 + 2 * 1) * (2 + 1) + 1")))
